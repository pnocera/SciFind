// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"log/slog"
	"scifind-backend/internal/api/handlers"
	"scifind-backend/internal/config"
	"scifind-backend/internal/messaging"
	"scifind-backend/internal/repository"
	"scifind-backend/internal/services"
)

// Injectors from wire.go:

// InitializeApplication creates a fully configured application instance
func InitializeApplication(ctx context.Context) (*Application, func(), error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, nil, err
	}
	logger := ProvideLogger(configConfig)
	database := ProvideDatabase(configConfig, logger)
	client := ProvideMessaging(configConfig, logger)
	container := ProvideRepositories(database, logger)
	servicesContainer := ProvideServices(container, client, logger)
	handlersContainer := ProvideHandlers(servicesContainer, logger)
	application := ProvideApplication(configConfig, database, client, servicesContainer, handlersContainer, logger)
	return application, func() {
	}, nil
}

// InitializeDevelopmentApplication creates an application instance for development
func InitializeDevelopmentApplication(ctx context.Context) (*Application, func(), error) {
	configConfig := ProvideDevelopmentConfig()
	logger := ProvideDevelopmentLogger()
	database := ProvideDevelopmentDatabase(logger)
	client := ProvideDevelopmentMessaging(logger)
	container := ProvideDevelopmentRepositories(database, logger)
	servicesContainer := ProvideDevelopmentServices(container, client, logger)
	handlersContainer := ProvideHandlers(servicesContainer, logger)
	application := ProvideApplication(configConfig, database, client, servicesContainer, handlersContainer, logger)
	return application, func() {
	}, nil
}

// InitializeTestApplication creates an application instance for testing
func InitializeTestApplication(ctx context.Context) (*Application, func(), error) {
	configConfig := ProvideTestConfig()
	logger := ProvideTestLogger()
	database := ProvideTestDatabase(logger)
	client := ProvideTestMessaging(logger)
	container := ProvideTestRepositories(database, logger)
	servicesContainer := ProvideTestServices(container, client, logger)
	handlersContainer := ProvideTestHandlers(servicesContainer, logger)
	application := ProvideApplication(configConfig, database, client, servicesContainer, handlersContainer, logger)
	return application, func() {
	}, nil
}

// InitializeDatabaseOnly creates only database dependencies for migrations
func InitializeDatabaseOnly(ctx context.Context) (*repository.Database, func(), error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, nil, err
	}
	logger := ProvideLogger(configConfig)
	database := ProvideDatabase(configConfig, logger)
	return database, func() {
	}, nil
}

// InitializeMessagingOnly creates only messaging dependencies for testing
func InitializeMessagingOnly(ctx context.Context) (*messaging.Client, func(), error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, nil, err
	}
	logger := ProvideLogger(configConfig)
	client := ProvideMessaging(configConfig, logger)
	return client, func() {
	}, nil
}

// wire.go:

// Application represents the complete application with all dependencies
type Application struct {
	Config    *config.Config
	Database  *repository.Database
	Messaging *messaging.Client
	Services  *services.Container
	Handlers  *handlers.Container
	Logger    *slog.Logger
}
